package html

import (
	"fmt"

	"gitlab.com/sacules/chartsy/internal/models"
	"gitlab.com/sacules/chartsy/internal/validator"
)

templ ChartList(currentChart *models.Chart, charts []models.Chart) {
	<ul class="grid divide-y divide-slate-700">
		for _, c := range charts {
			<li tabindex="0">
				<button
					class="w-full"
					name="id"
					value={fmt.Sprint(c.ID)}
					hx-get="/"
					hx-swap="multi:#header,#main,#panel-right:outerHTML,#panel-left:outerHTML transition:true"
					hx-push-url="true"
				>
					<figure
						class={"group p-4 flex gap-4 items-center", templ.KV("bg-slate-800", currentChart.ID == c.ID), templ.KV("hover:bg-slate-800", currentChart.ID != c.ID)}
					>
						<img src="/assets/img/generic-chart.png" class="w-24 h-24" />
						<figcaption class={"select-none", templ.KV("font-bold", currentChart.ID == c.ID)}>
							{c.Name}
						</figcaption>
					</figure>
				</button>
			</li>
		}
		<li class="grid place-items-center py-4">
			<button
				class="flex gap-2"
				hx-post="/new"
				hx-swap="multi:#header,#main,#panel-right:outerHTML,#panel-left:outerHTML transition:true"
			>
				<div class="h-6 w-6">
					<icon-plus></icon-plus>
				</div>
				New chart
			</button>
		</li>
	</ul>
}

templ Search() {
	<form
		_="on submit(event) event.preventDefault()"
		hx-post="/search"
		hx-target="#search-results"
		hx-trigger="input from:[name='search'] delay:300ms"
		class="w-full flex flex-col gap-2 border-b border-slate-500/75 p-4"
	>
		<input-text type="search" name="search" placeholder="e.g. In Absentia"></input-text>
	</form>
	<ul id="search-results" class="flex flex-col overflow-y-auto divide-y divide-slate-500/75"></ul>
}

type SearchResult struct {
	Title  string
	Author string
	Url    string
}

templ SearchResults(res []SearchResult) {
	for _, r := range res {
		<li
			_={fmt.Sprintf(`set element data to { src: '%s', title: '%s', caption: '%s' }
				   on click
					   send chartImages(src: data.src, title: data.title, caption: data.caption) to #chart
					   send close to #search-mobile
					   call history.pushState(null, null, '/')
				   on dragstart
					   call event.dataTransfer.setData('text/plain', data as JSON)
					   set $draggingFromResults to true
				   on dragend
					   set $draggingFromResults to false`, r.Url, r.Title, r.Author)}
			class="search-result p-4 group focus-visible:bg-slate-200 hover:bg-slate-200 transition duration-150"
			draggable="true"
			tabindex="0"
		>
			<figure class="h-24 flex gap-4 items-center">
				<img
					class="w-24 object-center object-cover transition-all duration-150 shadow-md"
					role="img"
					src={r.Url}
				/>
				<figcaption
					class="max-w-[10rem] max-h-full text-sm break-words \
						   text-ellipsis overflow-hidden transition-all duration-150 \
						   filter group-focus-visible:invert group-hover:invert"
					style="user-select: none;"
				>
					<strong>{r.Author}</strong>
					<p>{r.Title}</p>
				</figcaption>
			</figure>
		</li>
	}
}

type UserLoginForm struct {
	Email               string `form:"email"`
	Password            string `form:"password"`
	validator.Validator `form:"-"`
}

templ Login(form UserLoginForm) {
	<form id="login" class="aria-hidden:hidden" hx-post="/login" hx-swap="outerHTML">
		<div class="flex flex-col gap-4 p-4 border-t border-slate-700">
			<input-text
				required
				name="email"
				label="E-mail"
				if _, ok := form.FieldErrors["email"]; ok {
					error={form.FieldErrors["email"]}
				}
				if form.Email != "" {
					value={form.Email}
				}
			>
			</input-text>
			<input-text
				required
				name="password"
				type="password"
				label="Password"
				if _, ok := form.FieldErrors["email"]; ok {
					error={form.FieldErrors["email"]}
				}
			>
			</input-text>
		</div>
		<div class="p-4 flex justify-evenly border-t border-slate-700">
			<button type="reset" class="grid place-items-center gap-2">Cancel</button>
			<button type="submit" class="pl-4 grid grid-cols-[1fr_1rem] gap-2">
				Confirm
				<icon-spinner class="htmx-indicator spinner w-4 h-4"></icon-spinner>
			</button>
		</div>
	</form>
}

type UserSignupForm struct {
	Email               string `form:"email"`
	Password            string `form:"password"`
	validator.Validator `form:"-"`
}

templ Signup(form UserSignupForm) {
	<form id="signup" class="aria-hidden:hidden grid-cols-[auto_auto]" hx-post="/signup" hx-swap="outerHTML">
		<div class="flex flex-col gap-4 p-4 border-t border-slate-700">
			<input-text
				required
				name="email"
				label="E-mail"
				caption="Required"
				if _, ok := form.FieldErrors["email"]; ok {
					error={form.FieldErrors["email"]}
				}
				if form.Email != "" {
					value={form.Email}
				}
			>
			</input-text>
			<input-text
				required
				name="password"
				type="password"
				label="Password"
				caption="Required, must be at least 8 characters long"
				if _, ok := form.FieldErrors["email"]; ok {
					error={form.FieldErrors["email"]}
				}
			>
			</input-text>
		</div>
		<div class="p-4 flex justify-evenly border-t border-slate-700">
			<button type="reset" class="grid place-items-center gap-2">Cancel</button>
			<button type="submit" class="pl-4 grid grid-cols-[1fr_1rem] gap-2">
				Confirm
				<icon-spinner class="htmx-indicator spinner w-4 h-4"></icon-spinner>
			</button>
		</div>
	</form>
}

templ PanelLeft(isAuthenticated bool, currentChart *models.Chart, charts []models.Chart) {
	<aside
		_="install TabContainer"
		id="panel-left"
		class="hidden bg-slate-900 border-r border-slate-700 md:grid grid-cols-1 grid-rows-[auto_1fr] overflow-y-hidden"
	>
		<div role="tablist" class="flex gap-2 p-4 border-b border-slate-700">
			if isAuthenticated {
				<a
					id="tab-charts"
					href="#charts"
					role="tab"
					aria-controls="charts"
					class="w-14 aria-selected:font-bold aria-selected:text-slate-100 text-slate-300"
				>
					Charts
				</a>
			}
			if currentChart != nil {
				<a
					id="tab-search"
					href="#search"
					role="tab"
					aria-controls="search"
					class="w-14 aria-selected:font-bold aria-selected:text-slate-100 text-slate-300"
				>
					Search
				</a>
			}
			if isAuthenticated {
				<a
					id="tab-profile"
					href="#profile"
					role="tab"
					aria-controls="profile"
					class="w-14 aria-selected:font-bold aria-selected:text-slate-100 text-slate-300 hidden"
				>
					Profile
				</a>
			} else {
				<a
					id="tab-login"
					href="#login"
					role="tab"
					aria-controls="login"
					class="w-14 aria-selected:font-bold aria-selected:text-slate-100 text-slate-300"
				>
					Log in
				</a>
				<a
					id="tab-signup"
					href="#signup"
					role="tab"
					aria-controls="signup"
					class="w-14 aria-selected:font-bold aria-selected:text-slate-100 text-slate-300"
				>
					Sign up
				</a>
			}
		</div>
		<div id="charts" role="tabpanel" aria-labelledby="tab-charts" hidden class="items-start">
			@ChartList(currentChart, charts)
		</div>
		if currentChart != nil {
			<div
				id="search"
				role="tabpanel"
				aria-labelledby="tab-search"
				hidden
				class="grid-rows-[auto_1fr] overflow-y-hidden"
			>
				@Search()
			</div>
		}
		if isAuthenticated {
			<div id="profile" role="tabpanel" aria-labelledby="tab-profile" hidden>Bot√≥n para salir xd</div>
		} else {
			<div id="login" role="tabpanel" aria-labelledby="tab-login" hidden>
				@Login(UserLoginForm{})
			</div>
			<div id="signup" role="tabpanel" aria-labelledby="tab-signup" hidden>
				@Signup(UserSignupForm{})
			</div>
		}
	</aside>
}

templ PanelRight(isAuthenticated bool, currentChart *models.Chart) {
	if currentChart != nil {
		<aside id="panel-right" class="flex-col overflow-y-auto bg-slate-900 hidden md:flex col-start-3 border-l border-slate-700">
			<form
				if isAuthenticated {
					hx-patch="/settings"
					hx-trigger="input from:.settings-desktop delay:300ms, change from:.settings-desktop
								delay:300ms" hx-include=".settings-desktop"
					hx-swap="none"
				}
			>
				<settings-reveal title="General">
					<input type="number" name="id" hidden value={fmt.Sprint(currentChart.ID)} class="settings-desktop" />
					<div class="p-4">
						<input-text
							_="on input(value)
							   send chart:title(value: value) to #images-text"
							name="title"
							label="Title"
							value={currentChart.Title}
							class="settings-desktop"
							caption="Works with Markdown and emojis! üî•"
						>
						</input-text>
						<hr class="border-slate-700 my-4" />
						<div
							_="on toggle(value)
						   if value is 'color'
							   add [@aria-hidden=false] to #settings-chart-bg-color
							   add [@aria-hidden=true] to #settings-chart-bg-gradient
							   add [@aria-hidden=true] to #settings-chart-bg-image
						   end
						   if value is 'gradient'
							   add [@aria-hidden=true] to #settings-chart-bg-color
							   add [@aria-hidden=false] to #settings-chart-bg-gradient
							   add [@aria-hidden=true] to #settings-chart-bg-image
						   end
						   if value is 'image'
							   add [@aria-hidden=true] to #settings-chart-bg-color
							   add [@aria-hidden=true] to #settings-chart-bg-gradient
							   add [@aria-hidden=false] to #settings-chart-bg-image
						   end
						   send bgChange(state: value) to #images-text"
							id="settings-chart-bg"
							class="flex flex-col gap-4"
						>
							<input-radio-group
								_="on change(value)
							   send toggle(value: value) to #settings-chart-bg"
								name="background"
							>
								<span slot="legend">Background</span>
								<div default value="color" class="rounded-l" slot="item">Color</div>
								<div value="gradient" slot="item">Gradient</div>
								<div value="image" class="rounded-r" slot="item">Image</div>
							</input-radio-group>
							<div id="settings-chart-bg-color" class="aria-hidden:hidden flex justify-start items-center gap-4">
								<output name="color" for="settings-chart-bg-color-picker">{currentChart.BgColor}</output>
								<input
									_="on input(target)
										   set val to target.value
										   send bgChangeColor(value: val) to #images-text
										   put val into the previous <output/>"
									id="settings-chart-bg-color-picker"
									class="h-8 w-16 rounded border border-slate-700 bg-slate-900 p-2 settings-desktop"
									autocomplete="off"
									type="color"
									name="bgColor"
									value={currentChart.BgColor}
								/>
							</div>
							<div id="settings-chart-bg-gradient" class="flex justify-between aria-hidden:hidden" aria-hidden="true">
								<div class="flex gap-4 items-center">
									<label for="settings-chart-bg-gradient-from">From</label>
									<input
										_="on input(target)
											   send bgChangeGradientFrom(value: target.value) to #images-text"
										id="settings-chart-bg-gradient-from"
										class="h-8 w-16 rounded border border-slate-700 bg-slate-900 p-2 aria-hidden:hidden settings-desktop"
										autocomplete="off"
										type="color"
										name="bgGradientFrom"
										value={currentChart.BgColor}
									/>
								</div>
								<div class="flex gap-4 items-center">
									<label for="settings-chart-bg-gradient-to">To</label>
									<input
										_="on input(target)
											  send bgChangeGradientTo(value: target.value) to #images-text"
										id="settings-chart-bg-gradient-to"
										class="h-8 w-16 rounded border border-slate-700 bg-slate-900 p-2 aria-hidden:hidden settings-desktop"
										autocomplete="off"
										type="color"
										name="bgGradientTo"
										value={currentChart.BgColor}
									/>
								</div>
							</div>
							<input
								_="on input(target)
									  send bgChangeImage(file: target.files[0]) to #images-text"
								aria-hidden="true"
								class="aria-hidden:hidden settings-desktop"
								id="settings-chart-bg-image"
								type="file"
								name="bgImage"
								accept="image/*"
							/>
						</div>
					</div>
				</settings-reveal>
				<settings-reveal title="Layout">
					<fieldset class="grid grid-cols-2 gap-4 p-4" role="group">
						<input-numeric
							_="install ChartSetting"
							id="column-count"
							name="cols"
							value={fmt.Sprint(currentChart.ColumnCount)}
							class="settings-desktop"
							min="1"
							max="10"
						>
							Columns
						</input-numeric>
						<input-numeric
							_="install ChartSetting"
							id="row-count"
							name="rows"
							value={fmt.Sprint(currentChart.RowCount)}
							class="settings-desktop"
							min="1"
							max="10"
						>
							Rows
						</input-numeric>
						<input-numeric
							_="install ChartSetting"
							id="spacing"
							name="spacing"
							value={fmt.Sprint(currentChart.Spacing)}
							class="settings-desktop"
							min="0"
							max="5"
						>
							Spacing
						</input-numeric>
						<input-numeric
							_="install ChartSetting"
							id="padding"
							name="padding"
							value={fmt.Sprint(currentChart.Padding)}
							class="settings-desktop"
							min="0"
							max="5"
						>
							Padding
						</input-numeric>
					</fieldset>
				</settings-reveal>
				<settings-reveal title="Images">
					<input-radio-group
						_="on change(value)
							  send chartImagesShape(value: value) to #chart"
						name="imagesShape"
						class="settings-desktop px-2"
						value="square"
					>
						<span slot="legend">Shape</span>
						<div default value="square" class="rounded-l" slot="item">Square</div>
						<div value="portrait" class="rounded-r" slot="item">Portrait</div>
					</input-radio-group>
					<input-radio-group
						_="on change(value)
							  call #chart.style.setProperty('--chart-settings-images-width', value)"
						name="imagesSize"
						class="settings-desktop"
						value="150"
					>
						<span slot="legend">Size</span>
						<div default value="150" class="rounded-l" slot="item">Regular</div>
						<div value="200" class="rounded-r" slot="item">Large</div>
					</input-radio-group>
				</settings-reveal>
				<settings-reveal title="Titles">
					<input-radio-group
						_="on change(value)
							  send chartTextPlacement(value: value) to #chart"
						name="imagesTextPosition"
						class="p-2 settings-desktop"
						value="hide"
					>
						<span slot="legend">Position</span>
						<div default value="hide" class="rounded-tl border-b-0" slot="item">Hide</div>
						<div value="inline" class="border-b-0" slot="item">Inline</div>
						<div value="overlay" class="rounded-tr border-b-0" slot="item">Overlay</div>
						<div value="left" class="rounded-bl" slot="item">Left</div>
						<div value="below" slot="item">Below</div>
						<div value="right" class="rounded-br" slot="item">Right</div>
					</input-radio-group>
				</settings-reveal>
			</form>
		</aside>
	}
}
