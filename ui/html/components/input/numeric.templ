package input

import (
	"fmt"

	"gitlab.com/sacules/chartsy/ui/html/components/icon"
)

type NumericProps struct {
	Id string
	Class string
	Name string
	Label string
	DefaultValue int
	Min int
	Max int
	Step int
}

templ Numeric(props NumericProps) {
	<div
		id={props.Id}
		role="group"
		class={"grid grid-cols-2 items-center " + props.Class}
		data-step={fmt.Sprint(props.Step)}
		data-min={fmt.Sprint(props.Min)}
		data-max={fmt.Sprint(props.Max)}
		data-name={props.Name}
	>
		<label for={props.Id + "-input"} class="justify-self-stretch text-right">
			{ props.Label }
		</label>
		<div class="grid place-items-center justify-center gap-2">
			<button
				type="button"
				aria-controls={props.Id}
				class="w-4 h-4 text-slate-600 hover:text-slate-50 disabled:text-slate-600 disabled:cursor-not-allowed transform rotate-180"
			>
				@icon.ChevronDown()
				<script>
					me().on("click", ev => me(`#${me(ev).attribute("aria-controls")}`).send("inc"))
				</script>
			</button>
			<output
				for={props.Id + "-input"}
				class="text-center"
			>
				{ fmt.Sprint(props.DefaultValue) }
			</output>
			<button
				type="button"
				aria-controls={props.Id}
				class="w-4 h-4 text-slate-600 hover:text-slate-50 disabled:text-slate-600 disabled:cursor-not-allowed"
			>
				@icon.ChevronDown()
				<script>
					me().on("click", ev => me(`#${me(ev).attribute("aria-controls")}`).send("dec"))
				</script>
			</button>
			<input id={props.Id + "-input"} value={fmt.Sprint(props.DefaultValue)} name={props.Name} hidden autocomplete="off" />
		</div>
		<script>
			// Prevent vars from leaking to the global scope
			(() => {
				const { name } = me().dataset
				const step = Number(me().dataset.step)
				const min = Number(me().dataset.min)
				const max = Number(me().dataset.max)

				function change(ev, val) {
					me("output", me(ev)).value = val
					me("input", me(ev)).value = val
				}

				me().on("inc", ev => {
					const val = Number(me(`#${ev.target.id} input`).value) + step

					if (val >= max) {
						me("button:first-child", me(ev)).attribute("disabled", true)
					}

					if (val > min) {
						me("button:last-of-type", me(ev)).attribute("disabled", null)
					}

					change(ev, val)
				})

				me().on("dec", ev => {
					const val = Number(me(`#${ev.target.id} input`).value) - step

					if (val <= min) {
						me("button:last-of-type", me(ev)).attribute("disabled", true)
					}

					if (val < max) {
						me("button:first-child", me(ev)).attribute("disabled", null)
					}

					change(ev, val)
				})
			})()
		</script>
	</div>
}
