package html

import (
	"fmt"

	"gitlab.com/sacules/chartsy/internal/models"
	"gitlab.com/sacules/chartsy/internal/validator"

	"gitlab.com/sacules/chartsy/ui/html/components"
	"gitlab.com/sacules/chartsy/ui/html/components/icon"
	"gitlab.com/sacules/chartsy/ui/html/components/input"
)

templ ChartList(currentChart *models.Chart, charts []models.Chart) {
	<ul class="grid divide-y divide-slate-700">
		for _, c := range charts {
			<li tabindex="0">
				<button
					class="w-full"
					name="id"
					value={fmt.Sprint(c.ID)}
					hx-get="/"
					hx-swap="multi:#header,#main,#panel-right:outerHTML,#panel-left:outerHTML transition:true"
					hx-push-url="true"
					_="on htmx:afterSettle
					      call chartRender(true)"
				>
					<figure
						class={ "group p-4 flex gap-4 items-center", templ.KV("bg-slate-800", currentChart.ID == c.ID), templ.KV("hover:bg-slate-800", currentChart.ID != c.ID) }
					>
						<img src="/assets/img/generic-chart.png" class="w-24 h-24"/>
						<figcaption
							_="on chart:name(value)
								  put value into me"
							class={ "select-none", templ.KV("font-bold chart-name", currentChart.ID == c.ID) }
						>
							{ c.Name }
						</figcaption>
					</figure>
				</button>
			</li>
		}
		<li class="grid place-items-center py-4">
			<button
				class="flex gap-2"
				hx-post="/new"
				hx-swap="multi:#header,#main,#panel-right:outerHTML,#panel-left:outerHTML transition:true"
			>
				<div class="h-6 w-6">
					@icon.Plus()
				</div>
				New chart
			</button>
		</li>
	</ul>
}

templ Search() {
	<form
		_="on submit(event) event.preventDefault()"
		hx-post="/search"
		hx-target="#search-results"
		hx-trigger="input from:#search delay:300ms"
		class="w-full flex flex-col gap-2 border-b border-slate-500/75 p-4"
	>
		@input.Text(input.InputTextProps{
			Id: "search",
			Name: "search",
			Placeholder: "e.g. In Absentia",
		})
	</form>
	<ul id="search-results" class="flex flex-col overflow-y-auto divide-y divide-slate-500/75"></ul>
}


type SearchResult struct {
	Title  string
	Author string
	Url    string
}

script handleDragStart(s SearchResult) {
	imageSearchData = s;
}

templ SearchResults(res []SearchResult) {
	for _, r := range res {
		<li
			ondragstart={handleDragStart(r)}
			class="search-result p-4 group focus-visible:bg-slate-200 hover:bg-slate-200 transition duration-150 hover:cursor-grab"
			draggable="true"
			tabindex="0"
		>
			<figure class="h-24 flex gap-4 items-center">
				<img
					class="w-24 object-center object-cover transition-all duration-150 shadow-md"
					role="img"
					src={ r.Url }
				/>
				<figcaption
					class="max-w-[10rem] max-h-full text-sm break-words \
						   text-ellipsis overflow-hidden transition-all duration-150 \
						   filter group-focus-visible:invert group-hover:invert"
					style="user-select: none;"
				>
					<strong>{ r.Author }</strong>
					<p>{ r.Title }</p>
				</figcaption>
			</figure>
		</li>
	}
}

type UserLoginForm struct {
	Email               string `form:"email"`
	Password            string `form:"password"`
	validator.Validator `form:"-"`
}

templ Login(form UserLoginForm) {
	<form
		id="login"
		class="aria-hidden:hidden"
		hx-post="/login"
		hx-swap="multi:#header,#main,#panel-right:outerHTML,#panel-left:outerHTML transition:true"
	>
		<div class="flex flex-col gap-4 p-4 border-t border-slate-700">
			@input.Text(input.InputTextProps{
				Id: "login-email",
				Name: "email",
				Label: "E-mail",
				Type: "E-mail",
				Error: form.FieldErrors["email"],
				DefaultValue: form.Email,
				Required: true,
				Autocomplete: "on",
			})
			@input.Text(input.InputTextProps{
				Id: "login-password",
				Name: "password",
				Type: "password",
				Label: "Password",
				Error: form.FieldErrors["password"],
				Required: true,
			})
			if _, ok := form.FieldErrors["general"]; ok {
				<p class="text-rose-600">
					{form.FieldErrors["general"]}
				</p>
			}
		</div>
		<div class="p-4 flex justify-evenly border-t border-slate-700 relative">
			@components.Button(components.ButtonProps{
				Type: "reset",
			}) {
				Reset
			}
			@components.Button(components.ButtonProps{
				Type: "submit",
			}) {
				Confirm
			}
			<icon-spinner class="absolute right-4 inset-y-8 htmx-indicator spinner w-4 h-4"></icon-spinner>
		</div>
	</form>
}

type UserSignupForm struct {
	Email               string `form:"email"`
	Password            string `form:"password"`
	validator.Validator `form:"-"`
}

templ Signup(form UserSignupForm, err error) {
	<form id="signup" class="aria-hidden:hidden grid-cols-[auto_auto]" hx-post="/signup" hx-swap="outerHTML">
		<div class="flex flex-col gap-4 p-4 border-t border-slate-700">
			@input.Text(input.InputTextProps{
				Id: "signup-password",
				Name: "email",
				Type: "email",
				Label: "E-mail",
				Caption: "Required",
				DefaultValue: form.Email,
				Error: form.FieldErrors["email"],
				Required: true,
			})
			@input.Text(input.InputTextProps{
				Id: "signup-password",
				Name: "password",
				Type: "password",
				Label: "Password",
				Error: form.FieldErrors["password"],
				Caption: "Required, must be at least 8 characters long",
				Required: true,
			})
		</div>
		if err != nil {
			<p>
				{err.Error()}
			</p>
		}
		<div class="p-4 flex justify-evenly border-t border-slate-700 relative">
			@components.Button(components.ButtonProps{
				Type: "reset",
			}) {
				Reset
			}
			@components.Button(components.ButtonProps{
				Type: "submit",
			}) {
				Confirm
			}
			<icon-spinner class="absolute right-4 inset-y-8 htmx-indicator spinner w-4 h-4"></icon-spinner>
		</div>
	</form>
}

templ SignupOk(email string) {
	<p class="p-4">
	    A confirmation email has been sent to <strong>{email}</strong>.
		Please click the link within to confirm your account.
	</p>
}

templ PanelLeft(isAuthenticated bool, currentChart *models.Chart, charts []models.Chart) {
	<aside
		_="install TabContainer"
		id="panel-left"
		class="hidden bg-slate-900 border-r border-slate-700 md:grid grid-cols-1 grid-rows-[auto_1fr] overflow-y-hidden"
	>
		<div role="tablist" class="flex gap-2 p-4 border-b border-slate-700">
			if isAuthenticated {
				<a
					id="tab-charts"
					href="#charts"
					role="tab"
					aria-controls="charts"
					class="w-14 aria-selected:font-bold aria-selected:text-slate-100 text-slate-300"
				>
					Charts
				</a>
			}
			if currentChart != nil {
				<a
					id="tab-search"
					href="#search"
					role="tab"
					aria-controls="search"
					class="w-14 aria-selected:font-bold aria-selected:text-slate-100 text-slate-300"
				>
					Search
				</a>
			}
			if isAuthenticated {
				<a
					id="tab-profile"
					href="#profile"
					role="tab"
					aria-controls="profile"
					class="w-14 aria-selected:font-bold aria-selected:text-slate-100 text-slate-300 hidden"
				>
					Profile
				</a>
			} else {
				<a
					id="tab-login"
					href="#login"
					role="tab"
					aria-controls="login"
					class="w-14 aria-selected:font-bold aria-selected:text-slate-100 text-slate-300"
				>
					Log in
				</a>
				<a
					id="tab-signup"
					href="#signup"
					role="tab"
					aria-controls="signup"
					class="w-14 aria-selected:font-bold aria-selected:text-slate-100 text-slate-300"
				>
					Sign up
				</a>
			}
		</div>
		<div id="charts" role="tabpanel" aria-labelledby="tab-charts" hidden class="items-start">
			if currentChart == nil {
				@ChartList(&models.Chart{}, charts)
			} else {
				@ChartList(currentChart, charts)
			}
		</div>
		if currentChart != nil {
			<div
				id="search"
				role="tabpanel"
				aria-labelledby="tab-search"
				hidden
				class="grid-rows-[auto_1fr] overflow-y-hidden"
			>
				@Search()
			</div>
		}
		if isAuthenticated {
			<div id="profile" role="tabpanel" aria-labelledby="tab-profile" hidden>BotÃ³n para salir xd</div>
		} else {
			<div id="login" role="tabpanel" aria-labelledby="tab-login" hidden>
				@Login(UserLoginForm{})
			</div>
			<div id="signup" role="tabpanel" aria-labelledby="tab-signup" hidden>
				@Signup(UserSignupForm{}, nil)
			</div>
		}
	</aside>
}

templ PanelRight(isAuthenticated bool, currentChart *models.Chart) {
	<aside id="panel-right" class="empty:hidden flex-col overflow-y-auto bg-slate-900 hidden md:flex col-start-3 border-l border-slate-700">
		if currentChart != nil {
			<form
				if isAuthenticated {
					hx-patch="/settings"
					hx-trigger="input from:.settings delay:300ms, change from:.settings delay:300ms"
					hx-include=".settings"
					hx-swap="none"
				}
			>
				<input type="number" name="id" hidden value={ fmt.Sprint(currentChart.ID) } class="settings"/>
				@components.Reveal(components.RevealProps{Title: "General"}) {
					<div class="p-4 grid gap-4">
						@input.Text(input.InputTextProps{
							Id: "chart-settings-title",
							Name: "title",
							Label: "Title",
							Type: "text",
							DefaultValue: currentChart.Title,
							Caption: "Works with Markdown and emojis! ðŸ”¥",
							Autocomplete: "off",
							Class: "settings",
							HS: `on input(target)
									send chart:title(value: target.value) to <.chart-title />`,
						})
						<div
							_="on toggle(value)
								   if value is 'color'
									   add [@aria-hidden=false] to #settings-bg-color
									   add [@aria-hidden=true] to #settings-bg-gradient
									   add [@aria-hidden=true] to #settings-bg-image
								   end
								   if value is 'gradient'
									   add [@aria-hidden=true] to #settings-bg-color
									   add [@aria-hidden=false] to #settings-bg-gradient
									   add [@aria-hidden=true] to #settings-bg-image
								   end
								   if value is 'image'
									   add [@aria-hidden=true] to #settings-bg-color
									   add [@aria-hidden=true] to #settings-bg-gradient
									   add [@aria-hidden=false] to #settings-bg-image
								   end
								   send bgChange(state: value) to #images-text"
							id="settings-bg"
							class="grid gap-4"
						>
							@input.RadioGroup(input.RadioGroupProps{
								Name: "background",
								Legend: "Background",
								HS: "on change(target) trigger toggle(value: target.value) on #settings-bg",
							}) {
								@input.RadioGroupItem(input.RadioGroupItemProps{
									Id: "background-setting-color",
									Label: "Color",
									Name: "background-setting",
									Value: "color",
									IsDefault: true,
								})
								@input.RadioGroupItem(input.RadioGroupItemProps{
									Id: "background-setting-gradient",
									Label: "Gradient",
									Name: "background-setting",
									Value: "gradient",
									IsDefault: false,
								})
								@input.RadioGroupItem(input.RadioGroupItemProps{
									Id: "background-setting-image",
									Label: "Image",
									Name: "background-setting",
									Value: "image",
									IsDefault: false,
								})
							}
							<div id="settings-bg-color" class="aria-hidden:hidden flex justify-start items-center gap-4">
								@input.Color(input.InputColorProps{
									Id: "bg-color-picker",
									Name: "bg-color",
									DefaultValue: currentChart.BgColor,
									HS: `on input(target)
										    set val to target.value
										    send bgChangeColor(value: val) to #images-text
										    put val into the next <output/>`,
								})
								<output name="color" for="bg-color-picker">{currentChart.BgColor}</output>
							</div>
							<div id="settings-bg-gradient" class="flex justify-between aria-hidden:hidden" aria-hidden="true">
								@input.Color(input.InputColorProps{
									Id: "bg-gradient-from",
									Name: "bg-gradient-from",
									Label: "From",
									DefaultValue: currentChart.BgColor,
									HS: "on input(target) send bgChangeGradientFrom(value: target.value) to #images-text",
								})
								@input.Color(input.InputColorProps{
									Id: "bg-gradient-to",
									Name: "bg-gradient-to",
									Label: "To",
									DefaultValue: currentChart.BgColor,
									HS: "on input(target) send bgChangeGradientTo(value: target.value) to #images-text",
								})
							</div>
							<input
								_="on input(target)
									  send bgChangeImage(file: target.files[0]) to #images-text"
								aria-hidden="true"
								class="aria-hidden:hidden settings"
								id="settings-bg-image"
								type="file"
								name="bgImage"
								accept="image/*"
							/>
						</div>
					</div>
				}
				@components.Reveal(components.RevealProps{Title: "Layout"}) {
					<fieldset
						_="on change(name, value) from <.settings/>
							  trigger update(name: name, value: value) on #chart"
						class="grid grid-cols-2 gap-4 p-4"
						role="group"
					>
						@input.Numeric(input.NumericProps{ 
							Id: "column-count", 
							Class: "settings",
							Name: "cols", 
							DefaultValue: int(currentChart.ColumnCount), 
							Label: "Columns", 
							Step: 1, 
							Min: 1, 
							Max: 10,
						})
						@input.Numeric(input.NumericProps{ 
							Id: "row-count", 
							Class: "settings",
							Name: "rows", 
							DefaultValue: int(currentChart.RowCount), 
							Label: "Rows", 
							Step: 1, 
							Min: 1, 
							Max: 10,
						})
						@input.Numeric(input.NumericProps{ 
							Id: "spacing", 
							Class: "settings",
							Name: "spacing", 
							DefaultValue: int(currentChart.Spacing), 
							Label: "Spacing", 
							Step: 1, 
							Min: 0, 
							Max: 5,
						})
						@input.Numeric(input.NumericProps{ 
							Id: "padding", 
							Class: "settings",
							Name: "padding", 
							DefaultValue: int(currentChart.Padding), 
							Label: "Padding", 
							Step: 1, 
							Min: 0, 
							Max: 5,
						})
					</fieldset>
				}
				@components.Reveal(components.RevealProps{Title: "Images"}) {
					<div class="p-4 grid gap-4">
						@input.RadioGroup(input.RadioGroupProps{
							Name: "imagesShape",
							Legend: "Shape",
							Class: "settings",
							HS: "on change(target) send chartImagesShape(value: target.value) to #chart",
						}) {
							@input.RadioGroupItem(input.RadioGroupItemProps{
								Id: "images-shape-square",
								IsDefault: true,
								Name: "images-shape",
								Value: "square",
								Label: "Square",
							})
							@input.RadioGroupItem(input.RadioGroupItemProps{
								Id: "images-shape-portrait",
								IsDefault: false,
								Name: "images-shape",
								Value: "portrait",
								Label: "Portrait",
							})
						}
						@input.RadioGroup(input.RadioGroupProps{
							Name: "imagesSize",
							Legend: "Size",
							Class: "settings",
						}) {
							@input.RadioGroupItem(input.RadioGroupItemProps{
								Id: "images-size-regular",
								IsDefault: true,
								Value: "150",
								Name: "images-size",
								Label: "Regular",
							})
							@input.RadioGroupItem(input.RadioGroupItemProps{
								Id: "images-size-large",
								IsDefault: false,
								Value: "200",
								Name: "images-size",
								Label: "Large",
							})
						}
					</div>
				}
				@components.Reveal(components.RevealProps{Title: "Titles"}) {
					<div class="p-4 grid gap-4">
						@input.RadioGroup(input.RadioGroupProps{
							Name: "imagesTextPosition",
							Legend: "Position",
							Class: "settings",
							HS: "on change(target) send chartTextPlacement(value: target.value) to #chart",
						}) {
							@input.RadioGroupItem(input.RadioGroupItemProps{
								Id: "images-text-position-hide",
								IsDefault: true,
								Name: "images-text-position",
								Value: "hide",
								Label: "Hide",
							})
							@input.RadioGroupItem(input.RadioGroupItemProps{
								Id: "images-text-position-inline",
								IsDefault: false,
								Name: "images-text-position",
								Value: "inline",
								Label: "Inline",
							})
							@input.RadioGroupItem(input.RadioGroupItemProps{
								Id: "images-text-position-overlay",
								IsDefault: false,
								Name: "images-text-position",
								Value: "overlay",
								Label: "Overlay",
							})
							@input.RadioGroupItem(input.RadioGroupItemProps{
								Id: "images-text-position-left",
								IsDefault: false,
								Name: "images-text-position",
								Value: "left",
								Label: "Left",
							})
							@input.RadioGroupItem(input.RadioGroupItemProps{
								Id: "images-text-position-below",
								IsDefault: false,
								Name: "images-text-position",
								Value: "below",
								Label: "Below",
							})
							@input.RadioGroupItem(input.RadioGroupItemProps{
								Id: "images-text-position-right",
								IsDefault: false,
								Name: "images-text-position",
								Value: "right",
								Label: "Right",
							})
						}
					</div>
				}
			</form>
		}
	</aside>
}
